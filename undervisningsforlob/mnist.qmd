---
title: "Kan vi genkende håndskrevne tal?"
description-meta: "Hvordan får man en computer til at genkende håndskrevne tal? I dette forløb skal vi se på, hvordan man ud fra et billede af et håndskrevet tal kan lave en algortime, som kan genkende tallet."
image: "mnist_filer/.png"
categories:
  - C-niveau
  - Kort
  - Informatik
---

::: {.callout-caution collapse="true" appearance="minimal"}
### Forudsætninger og tidsforbrug
Forløbet kræver kendskab til:

+ Deskriptiv statistik.
+ Koordinatsystemer.
+ Rette linjer.

**Tidsforbrug:** Ca. 90 minutter.

:::


::: {.purpose}

### Formål

Nogle gange har man brug for, at håndskreven tekst kan digitaliseres. Det kan for eksempel være i en eksamenssituation, hvor din lærer og censor skriver din karakter på en liste, som efterfølgende skal tastes ind på en computer. Det ville være smart, hvis man kunne scanne listen eller tage et billede af den, hvorefter alle tal korrekt vil blive genkendt (så du ikke får en forkert karakter!). Dette forløb handler om, hvordan det kan gøres. 

:::

## RGB-farvemodellen

Vi skal først se lidt på, hvordan billeder bliver repræsenteret i en computer. Prøv at finde et billede på din computer og zoom ind så meget som muligt. Du vil opdage, at billedet i virkeligheden består en masse små kvadrater, som hver især har én farve. Sådan et kvadrat kaldes for en **pixel**.

Hver pixel består af tre **subpixels**. Den første subpixel kan lyse **R**ød, den anden **G**røn og den trejde **B**lå:

![Subpixel.](mnist_filer/subpixel.png){#fig-subpixel width=10% fig-align="center"}

Fordi alle farver bliver repræsenteret ved disse tre farver, taler man om en **RGB**-farvemodel.

Vi kan skrue på lysstyrken i hver af de tre subpixels. Hvis der er skruet fuldt op for farven, er værdien 255, mens helt slukket svarer til værdien[^1] 0.

[^1]: Tallene fra 0 til 255 kan i det binære talsystem repræsenteres ved 8 bits svarende til 1 byte.

Vores øje opfatter ikke farven på de tre subpixels individuelt, men vil i stedet se en blandingsfarve. Hvis der for eksempel er skruet fuldt op på alle tre farver, så vil vores øje opfatte det som hvid. Det vil sige, at den pixel, som er vist i @fig-subpixel lyser hvid for os!

Skruer vi helt op for rød og blå, men slukker for grøn fås en pink farve (som kaldes for magenta):

![Farven magenta - repræsenteret ved rgb(255,0,255).](mnist_filer/magenta.png){#fig-magenta width=10% fig-align="center"}


Farven skrives:

::: {.centertext}
rgb(255,0,255)
:::

Hvis der er skruet lige meget op for den røde, grønne og blå subpixel, fås forskellige nuancer af grå. Det er der vist eksempler på her:

![Forskellige toner af grå.](mnist_filer/grays.png){#fig-grays width=30% fig-align="center"}


Det betyder, at hvis man udelukkende er interesseret i gråskalaværdier, så kan vi nøjes med én værdi, som er den fælles værdi for rød, grøn og blå:


![Forskellige toner af grå repræsenteret ved én værdi.](mnist_filer/grays2.png){#fig-grays width=30% fig-align="center"}

## MNIST datasættet

Der findes et stort datasæt -- det såkaldte [MNIST[^2] datasæt](https://www.kaggle.com/datasets/oddrationale/mnist-in-csv?resource=download), hvor man har samlet 60000 håndskrevne cifre. Datasættet består af 60000 rækker, som hver repræsenterer et håndskrevet ciffer mellem $0$ og $9$. Der er i alt 785 kolonner. Den første kolonne kaldet \"label\" angiver hvilket ciffer, der er tale om. Det er den værdi, som vi i sidste ende gerne vil kunne forudsige. En sådan værdi kaldes også for en **targetværdi**. De resterende 784 kolonner angiver gråskalaværdierne fra et $28 \times 28$ pixel billede af et håndskrevet ciffer.

[^2]: MNIST står for \"Modified National Institute of Standards\".


På @fig-mnist0_original ses et håndskrevet \"0\" fra MNIST datasættet. 

![Et håndskrevet \"0\" fra MNIST datasættet.](mnist_filer/mnist_0_white_on_black.png){#fig-mnist0_original width=30% fig-align="center"}

Bemærk, at der er skrevet med hvid på sort baggrund. Når vi i det følgende viser billederne af de håndskrevne tal, har vi valgt at vende farveskalaen om, så vi i stedet for gråskalaværdien $x$ tegner en pixel med gråskalaværdi

$$
255-x
$$

Det betyder, at vi i stedet for sort viser hvid og omvendt. Dette er illustreret på @fig-mnist0.

![Et håndskrevet \"0\" fra MNIST datasættet, men hvor farveskalaen er vendt om.](mnist_filer/mnist_0_black_on_white.png){#fig-mnist0 width=30% fig-align="center"}


Vi skal nu prøve, om vi ud fra de 784 gråskalaværdier kan \"udvinde\" nogle få, men sigende værdier, som kan bruges til at forudsige, hvilket ciffer der er på billedet. I første omgang vil vi prøve, om vi kan kende forskel på 0- og 1-taller.

Det første vi vil gøre er, at lave billederne i en lavere opløsning svarende til, at billederne bliver mere pixeleret. Vi vil for eksempel lave et $7 \times 7$ pixel billede ved at inddele det oprindelige $28 \times 28$ pixel billede i $2 \times 2$ pixels, hvor vi så tager gennemsnittet af de pixelværdien. Et eksempel på det ses i @fig-pixeleret0:

![Et billede af et 0 med en oprindelige opløsning på $28 \times 28$ pixels og det samme billede i en opløsning på $7 \times 7$ pixels.](mnist_filer/pixeleret0.png){#fig-pixeleret0 width=80% fig-align="center"}

Til trods for at billedet er meget mere pixeleret, kan man faktisk stadigvæk tydeligt se konturerne af 0'et. Til sammenligning er et billede af et 1-tal vist i @fig-pixeleret1:

![Et billede af 1 med en oprindelige opløsning på $28 \times 28$ pixels og det samme billede i en opløsning på $7 \times 7$ pixels.](mnist_filer/pixeleret1.png){#fig-pixeleret1 width=80% fig-align="center"}

Idéen er, som nævnt tidligere, at vi ud fra $7 \times 7$ billederne vil udvinde nogle nye og få værdier, som kan bruges til at kende forskel på $0$- og $1$-tallerne. Vi vil altså gerne koge de ialt 49 pixelværdier ned til 1-3 værdier, som er nok til at adskille 0 fra 1. Sådanne værdier kaldes for **features**.


::: {.callout-note collapse="false" appearance="minimal"}

### Opgave 1: Beregning af featuers

Det kunne godt se ud som om, at der bruges flere farvede pixels på at skrive et 0, end der bliver brugt på at skrive et 1-tal. Vi vil derfor helt enkelt udregne den gennemsnitlige pixelværdi af hele billedet.

* Udregne den gennemsnitlige pixelværdi for nedenstående to billeder:

![](mnist_filer/pixel_gns.png){width=80% fig-align="center"}

Et andet bud på en feature er helt enkelt, hvor mange pixels, der er helt hvide (det vil her sige med en pixelværdi på 0). Vi vil nemlig forvente, at et 1-tal fylder mindre end et 0, så antallet af helt hvide pixels må forventes at være større på billederne af 1-taller.

* Tæl antallet at hele hvide pixels på ovenstående to billeder.

* Vi har nu beregnet to forskellige features for de to billeder. Er værdierne som forventet?

:::

Det bliver selvfølgelig lidt møjsommeligt at udregne disse to features for mange billeder. Derfor skal vi nu bruge en app, som gør arbejdet for dig.


::: {.callout-note collapse="false" appearance="minimal"}

### Opgave 2: MNIST datasættet

[Åbn denne app](https://apps01.math.aau.dk/ai/cifre/){target="blank"}. 

Øverst kan du vælge hvilket ciffer, du vil se. Dernæst kan du vælge pixelopløsning ($7 \times 7$, $14 \times 14$ eller det oprindelige $28 \times 28$). Herefter kan du vælge, om du vil have vist pixelværdierne på det pixelerede billede eller ej. Endelig kan du trykke på \"Forrige billede\" eller \"Næste billede\" for at bladre i de forskellige billeder fra MNIST datasættet. 

* Start med at bladre lidt rundt blandt de forskellige cifre, så du får et indtryk af datasættet.

I tabellen under det oprindelige billede, kan du se nogle forskellige features. Vi kommer tilbage til de første features senere, men \"pixel_gns\" og \"antal_tomme\" svarer til de to features, som du udregnede i opgave 1.

* Det første 0 (med et id på 0) og det første 1-tal (med id på 100) svarer til de to billeder, som du regnede på i opgave 1. Kontrollér, om du har regnet rigtigt!

:::


::: {.callout-note collapse="false" appearance="minimal"}

### Opgave 3: Download af datasæt

Vi skal nu have downloadet et datasæt, hvor disse to features er udregnet for i alt 100 billeder af henholdsvis 0 og 1-taller.

Gå til fanen \"Download\". Her vælger du:

- En pixelopløsning på 7.
- Sæt flueben ved 0 og 1.
- Under \"Hele billedet\" sætter du flueben både ved \"Gennemsnit\" og \"Antal tomme pixel\".
- Resten af fluebenene fjerner du.
- Tryk på \"Download data\".

:::

Når du åbner datasættet i Excel, skulle det gerne se sådan her ud:

![](mnist_filer/eks_excel.png){width=60% fig-align="center"}

Den første kolonne (\"label\") angiver, om der er tale om et billede af et 0 eller et 1-tal. Den anden kolonne (\"id\") er billedets id (det kan du bruge til at få vist billedet i app'en), de to sidste kolonner (\"pixel_gns\") og (\"antal_tomme\") svarer til de features, som vi beregnede i opgave 1.

::: {.callout-note collapse="false" appearance="minimal"}

### Opgave 4: Boksplots

Vi vil starte med at undersøge de to features hver for sig.

- Tegn i samme figur et boksplot af \"pixel_gns\" for både 0 og 1.

- Forklar niveau- og spredningsforskelle i de to boksplots.

- Gentag ovenstående, men for \"antal_tomme\".

- Vil man kunne bruge enten \"pixel_gns\" eller \"antal_tomme\" alene til at kende forskel på 0 og 1?

:::

::: {.callout-note collapse="false" appearance="minimal"}

### Opgave 5: To features

Åbn datasættet i Excel og kopiere det hele over i et \"Regneark\" i GeoGebra (tryk på \"Vis\" $\rightarrow$ \"Regneark\").

Vi vil lave et punktplot, hvor vi har \"pixel_gns\" ud af $x$-aksen og \"antal_tomme\" op af $y$-aksen. Samtidig vil vi farve alle punkter, som svarer til billeder af 0'er røde og alle punkter, som svarer til billeder af 1-taller blå. Gør følgende:

+ Stil dig i celle `E2` (det skulle gerne være den første tomme celle i anden række).
+ Skriv `(C2,D2)` (det skulle give dig værdien for \"pixel_gns\" og \"antal_tomme\" for det første billede).
+ Markér cellen. Tag ved den lille firkant nederst til højre og træk ned, så du får punkter for alle 200 billeder.
+ Justér på akserne på tegneblokken, så du kan se alle punkterne. *Hvis* der er vist et navn ved punkterne i tegneblokken, skal du markerer alle punkterne, højreklikke og trykke på \"Vis navn\".
+ Markér alle de punkter i regnearket, som har en \"label\" værdi på 0. Højreklik og vælg \"Egenskaber\". Under fanen \"Farve\" vælger du rød.
+ Farv på tilsvarende måde alle punkterne med en \"label\" værdi på 1 blå.

:::

